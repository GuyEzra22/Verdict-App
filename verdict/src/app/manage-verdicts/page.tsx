'use client';

import React, { useEffect, useState } from "react";
import { useRouter } from "next/navigation";
import { collection, getDocs } from "firebase/firestore";
import { db } from "@/services/fireBaseConfig";
import Navbar from "@/components/Navbar";
import jsPDF from "jspdf";


const ManageDocuments: React.FC = () => {
  const [verdicts, setVerdicts] = useState<any[]>([]);
  const [loading, setLoading] = useState(true);
  const router = useRouter();

  useEffect(() => {
    const fetchVerdicts = async () => {
      setLoading(true);
      try {
        const verdictCollection = collection(db, "verdicts");
        const querySnapshot = await getDocs(verdictCollection);

        const verdictList = querySnapshot.docs.map((doc) => ({
          id: doc.id,
          ...doc.data(),
        }));
        setVerdicts(verdictList);
      } catch (error) {
        console.error("Error fetching verdicts: ", error);
      } finally {
        setLoading(false);
      }
    };

    fetchVerdicts();
  }, []);

  const exportToPDF = (verdict: any) => {
    const doc = new jsPDF();

    // Add title
    doc.setFont("helvetica", "bold");
    doc.setFontSize(22);
    doc.text("Verdict Details", 105, 20, { align: "center" });

    // Add verdict details
    const verdictDetails = [
      { label: "Case Number", value: verdict.caseNumber },
      { label: "Court Name", value: verdict.courtName },
      { label: "Judge Name", value: verdict.judgeName },
      { label: "Plaintiff", value: verdict.plaintiff },
      { label: "Defendant", value: verdict.defendant },
      { label: "Stated Facts", value: verdict.statedFacts },
      { label: "Verdict", value: verdict.verdict },
    ];

    let currentY = 40; // Start position for text
    verdictDetails.forEach((item) => {
      doc.setFont("helvetica", "normal");
      doc.setFontSize(12);
      doc.text(`${item.label}:`, 20, currentY);
      doc.setFont("helvetica", "bold");
      doc.text(item.value || "N/A", 60, currentY);
      currentY += 10; // Move down for the next line
    });

    // Footer
    doc.setFont("helvetica", "italic");
    doc.setFontSize(10);
    doc.text(
      "Generated by Verdict Assistance System - Simplifying courtroom tasks",
      105,
      290,
      { align: "center" }
    );

    // Save the PDF
    doc.save(`Verdict_${verdict.caseNumber}.pdf`);
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-100 via-white to-gray-200 text-gray-900">
      <Navbar userName={null} onSignOut={() => {}} />
      <main className="flex-grow max-w-7xl mx-auto py-12 px-8">
        <h1 className="text-4xl font-extrabold text-gray-900 text-center mb-10">Manage Verdicts</h1>

        {loading ? (
          <p className="text-center text-lg font-medium text-gray-700">Loading documents...</p>
        ) : verdicts.length === 0 ? (
          <p className="text-center text-lg font-medium text-gray-700">
            No verdicts found. Start creating your first verdict!
          </p>
        ) : (
          <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-8">
            {verdicts.map((verdict) => (
              <div
                key={verdict.id}
                className="bg-white rounded-lg shadow-md p-6 hover:shadow-lg transition-transform transform hover:-translate-y-2"
              >
                <h2 className="text-2xl font-bold text-teal-700 mb-4">Case #{verdict.caseNumber}</h2>
                <div className="space-y-2">
                  <p className="text-gray-700">
                    <span className="font-semibold">Court:</span> {verdict.courtName}
                  </p>
                  <p className="text-gray-700">
                    <span className="font-semibold">Judge:</span> {verdict.judgeName}
                  </p>
                  <p className="text-gray-700">
                    <span className="font-semibold">Plaintiff:</span> {verdict.plaintiff}
                  </p>
                  <p className="text-gray-700">
                    <span className="font-semibold">Defendant:</span> {verdict.defendant}
                  </p>
                </div>
                <div className="mt-6 flex justify-between">
                  <button
                    className="px-4 py-2 text-sm font-medium text-white bg-teal-600 rounded-lg hover:bg-teal-700"
                    onClick={() => exportToPDF(verdict)}
                  >
                    Export to PDF
                  </button>
                  <button
                    className="px-4 py-2 text-sm font-medium text-white bg-gray-600 rounded-lg hover:bg-gray-700"
                    onClick={() => router.push(`/view-verdict/${verdict.id}`)}
                  >
                    View Details
                  </button>
                </div>
              </div>
            ))}
          </div>
        )}
      </main>

      <footer className="bg-gray-800 text-white py-8">
        <div className="max-w-7xl mx-auto px-8 text-center">
          <p className="text-sm">
            &copy; {new Date().getFullYear()} Verdict Assistance System. All rights reserved.
          </p>
          <p className="mt-2 text-gray-400">Enhancing efficiency and accuracy in the courtroom ⚖️</p>
        </div>
      </footer>
    </div>
  );
};

export default ManageDocuments;
